<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>My Site</title><link>https://waffleboot.github.io/</link><description>Recent content on My Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 07 Aug 2021 10:17:07 +0300</lastBuildDate><atom:link href="https://waffleboot.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang Naming</title><link>https://waffleboot.github.io/posts/5-golang-naming/</link><pubDate>Sat, 07 Aug 2021 10:17:07 +0300</pubDate><guid>https://waffleboot.github.io/posts/5-golang-naming/</guid><description>for _, tt := range tests { } Смысл в удваивании имени переменной когда итерируем по слайсу. Это применяется в тестах.
tests := []struct { give string wantHost string wantPort string }{ { give: &amp;quot;&amp;quot;, wantHost: &amp;quot;&amp;quot;, wantPort: &amp;quot;&amp;quot;, }, } for _, tt := range tests { t.Run(tt.give, func(t *testing.T) { host, port, err := net.SplitHostPort(tt.give) require.NoError(t, err) assert.Equal(t, tt.wantHost, host) assert.Equal(t, tt.wantPort, port) }) }</description></item><item><title>GopherAcademy Blog</title><link>https://waffleboot.github.io/posts/4-gopher-academy-blog/</link><pubDate>Thu, 05 Aug 2021 01:14:40 +0300</pubDate><guid>https://waffleboot.github.io/posts/4-gopher-academy-blog/</guid><description>GopherAcademy blog</description></item><item><title>Golang таймеры и netpoller</title><link>https://waffleboot.github.io/posts/3-golang-timers-netpoller/</link><pubDate>Thu, 05 Aug 2021 00:56:22 +0300</pubDate><guid>https://waffleboot.github.io/posts/3-golang-timers-netpoller/</guid><description>Прикольно. timer работает в связке с netpoller. Все таймеры кладутся в heap (структура данных) чтобы выбрать ближайший, при этом у каждого P свой heap. netpoller так-то заточен под asyncio, но блокирующий epoll syscall вызывается с таймаутом по ближайший таймер. Понятно, если придет io event, он проснется, выдаст пачку файловых дескрипторов и снова уснет, но время сна скорректируется. А если по таймауту проснется - дергаем таймер.
Самое интересное, когда добавляем таймер который должен тикнуть раньше времени таймаута netpoller.</description></item><item><title>Про параметры функции, публикуемых в открытый доступ</title><link>https://waffleboot.github.io/posts/2-api-config/</link><pubDate>Thu, 05 Aug 2021 00:40:05 +0300</pubDate><guid>https://waffleboot.github.io/posts/2-api-config/</guid><description>Изучал код worker пула https://github.com/ahmetask/worker и там есть такая функция NewWorkerPool(maxWorkers, jobQueueCapacity):
func NewWorkerPool(maxWorkers int, jobQueueCapacity int) *Pool Я предложил сделать отдельную структуру под конфигурацию workerPoolConfig и worker пул иницилизировать не через параметры, а через функциональные опции, через &amp;hellip;Opts. Добавить функцию buildWorkerPoolConfig, которая бы эти &amp;hellip;Opts читала и создавала конфиг, дополнительно валидируя параметры. Заслал PR, чел отказался фиксить по причине, что сломается обратная совместимость, а либа и так простая, так что нет смысла.</description></item></channel></rss>